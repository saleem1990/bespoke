/*
 * companyprflintfr.java
 *
 * Created on August 13, 2002, 11:36 AM
 */
package inventory;

import com.l2fprod.common.swing.renderer.DefaultCellRenderer;
import java.util.Date;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import kiwi.ui.DateTableCellRenderer;
import sms.SendSms;

/**
 *
 * @author root
 */
public class ReceivingStock extends javax.swing.JInternalFrame {

    String username = null;
    java.sql.Connection connectDB = null;
    int measure = 0;
    JComboBox quartercbx = new javax.swing.JComboBox();

    /**
     * Creates new form companyprflintfr
     */
    public ReceivingStock(java.sql.Connection conndb, String user) {
        connectDB = conndb;
        username = user;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new dbadmin.JTable();
        jButton52 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        txtSupplierCode = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtSupplier = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        dnoteNo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jPanel41 = new javax.swing.JPanel();
        orderNotxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jTextField6 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        receivedby = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        deliveredBytxt = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        datePicker1 = new dbadmin.DatePicker();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable()/*new com.afrisoftech.dbadmin.JTable()*/;
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton52.setText("Dispose");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        txtSupplierCode.setText("jTextField1");

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Receiving Stock");
        setToolTipText("");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Utopia", 3, 18)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        getContentPane().add(jLabel12, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("L.P.O. No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel8.setText("Supplier");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel8, gridBagConstraints);

        txtSupplier.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(txtSupplier, gridBagConstraints);

        jLabel7.setText("Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel7, gridBagConstraints);

        jLabel9.setText("D/Note No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel9, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jPanel1.add(dnoteNo, gridBagConstraints);

        jLabel4.setText("Delivery Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jComboBox2.setModel(dbadmin.ComboBoxModel.ComboBoxModel(connectDB, "Select '-' union select store_name from inventory_stores order by 1"));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jComboBox2, gridBagConstraints);

        jPanel41.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel41.setLayout(new java.awt.GridBagLayout());

        orderNotxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel41.add(orderNotxt, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel41.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel1.add(jPanel41, gridBagConstraints);

        jTextField6.setEditable(false);
        jTextField6.setMaximumSize(new java.awt.Dimension(10, 20));
        jTextField6.setMinimumSize(new java.awt.Dimension(10, 20));
        jTextField6.setPreferredSize(new java.awt.Dimension(10, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jTextField6, gridBagConstraints);

        jLabel10.setText("Store/Department Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel10, gridBagConstraints);

        jLabel14.setText("Received By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel14, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jPanel1.add(receivedby, gridBagConstraints);

        jLabel15.setText("Delivered By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel15, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jPanel1.add(deliveredBytxt, gridBagConstraints);

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("LPO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jRadioButton1, gridBagConstraints);

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("Direct Purchases");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jRadioButton3, gridBagConstraints);

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Donations");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jRadioButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jPanel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        jPanel1.add(datePicker1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Total Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        jPanel2.add(jLabel1, gridBagConstraints);

        jTextField2.setEditable(false);
        jTextField2.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 50);
        jPanel2.add(jTextField2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        jTable1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Code", "Desc", "Strength", "Qty Ordered", "Undelivered Qty", "LPO Units", "Received Units", "Qty Received", "Unit Price", "Value", "Batch No.", "Expiry Date", "Small_Unit qty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, true, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(204, 204, 255));
        /*
        cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset2, "item_description", null, null, null));
        javax.swing.table.TableColumn s = this.jTable1.getColumn("Item description");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        */
        javax.swing.table.TableColumn dateEditor = jTable1.getColumnModel().getColumn(11);
        //com.afrisoftech.lib.DateCellEditor dateCellEditor = new com.afrisoftech.lib.DateCellEditor(new org.jdesktop.swingx.JXDatePicker(), jTable1);
        dbadmin.DateCellEditor dateCellEditor = new dbadmin.DateCellEditor(new dbadmin.DatePicker(), jTable1);
        dateEditor.setCellEditor(dateCellEditor);
        //jTable1.setRowHeight(30);
        this.jTable1.getColumnModel().getColumn(6).setCellEditor(new javax.swing.DefaultCellEditor(new javax.swing.JComboBox(dbadmin.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' union select smallest_unit from inventory_items union select bulk_unit from inventory_bulk_breaking order by 1"))));
        javax.swing.table.DefaultTableCellRenderer cellRenderer = new javax.swing.table.DefaultTableCellRenderer();
        cellRenderer.setHorizontalAlignment(cellRenderer.TRAILING);
        dateEditor.setCellRenderer(cellRenderer);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTable1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel3.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(jPanel3, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jButton1.setMnemonic('s');
        jButton1.setText("Record Entry");
        jButton1.setToolTipText("click to store data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jButton1, gridBagConstraints);

        jButton6.setMnemonic('r');
        jButton6.setText("Remove Row");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jButton6, gridBagConstraints);

        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.setToolTipText("click to clear fields");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jButton3, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click to close");
        jButton4.setSelected(true);
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jButton4, gridBagConstraints);

        jButton5.setMnemonic('h');
        jButton5.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jButton5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jLabel13, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(jPanel4, gridBagConstraints);

        setBounds(0, 0, 619, 393);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT store_id from inventory_stores where store_name='" + jComboBox2.getSelectedItem().toString() + "'");
            java.sql.ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                jTextField6.setText(rs.getString("store_id"));
            }
        } catch (Exception y) {

        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButtonClicked();         // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButtonClicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.orderNotxt.getLocationOnScreen();

        jSearchDialog2.setSize(400, 200);

        jSearchDialog2.setLocation(point);

        jSearchDialog2.setVisible(true);

    }
    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate
        if (jTextField113.getCaretPosition() < 1) {
            System.out.println("Nothing");
        } else {
            jSearchTable2.setModel(dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct order_no from inventory_lpo WHERE order_no ILIKE '%" + jTextField113.getText() + "%' and balance>0 order by order_no"));

            jSearchTable2.setShowHorizontalLines(false);
            jSearchScrollPane2.setViewportView(jSearchTable2);

        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField113CaretUpdate

    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked

        for (int k = 0; k < jTable1.getRowCount(); k++) {
            for (int r = 0; r < jTable1.getColumnCount(); r++) {
                jTable1.getModel().setValueAt(null, k, r);
            }
        }

        orderNotxt.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT * from inventory_lpo where order_no='" + jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString() + "' AND balance!=0");
            java.sql.ResultSet rs = pstmt.executeQuery();
            int i = 0;
            String suppliercode = "";
            while (rs.next()) {
                suppliercode = rs.getString("supplier");
                txtSupplierCode.setText(suppliercode);
                //item
                java.sql.PreparedStatement pstmtItem = connectDB.prepareStatement("SELECT * from inventory_items where item_code='" + rs.getString("item_code") + "'");
                java.sql.ResultSet rsitem = pstmtItem.executeQuery();
                if (rsitem.next()) {

                    //this.jTable1.getColumnModel().getColumn(6).setCellEditor(new javax.swing.DefaultCellEditor(new javax.swing.JComboBox(dbadmin.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' union select smallest_unit from inventory_items where item_code='"+rsitem.getString("item_code")+"' union select bulk_unit from inventory_bulk_breaking where item_code='"+rsitem.getString("item_code")+"' order by 1"))));
                    //this.jTable1.setValueAt(new javax.swing.JComboBox(dbadmin.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' union select smallest_unit from inventory_items where item_code='"+rsitem.getString("item_code")+"' union select bulk_unit from inventory_bulk_breaking where item_code='"+rsitem.getString("item_code")+"' order by 1")),i,6);
                    jTable1.setValueAt(rsitem.getString("item_code"), i, 0);
                    jTable1.setValueAt(rsitem.getString("item_name"), i, 1);
                    jTable1.setValueAt(rsitem.getString("strength"), i, 2);
                    jTable1.setValueAt(Double.parseDouble(rs.getString("quantity")), i, 3);
                    jTable1.setValueAt(Double.parseDouble(rs.getString("balance")), i, 4);
                    jTable1.setValueAt(rs.getString("units"), i, 5);
                }
                //item end 
                i = i + 1;
            }

            //supplier
            java.sql.PreparedStatement pstmtSupplier = connectDB.prepareStatement("SELECT * from inventory_suppliers where supplier_code='" + suppliercode + "'");
            java.sql.ResultSet rssupplier = pstmtSupplier.executeQuery();
            if (rssupplier.next()) {
                txtSupplier.setText(rssupplier.getString("supplier_name"));
            }
            //supplier end
        } catch (Exception y) {

        }

        jSearchDialog2.dispose();


    }//GEN-LAST:event_jSearchTable2MouseClicked
    private void cmbox51ActionPerformed(java.awt.event.ActionEvent evt) {

    }
    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        this.jSearchDialog2.dispose();          // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        int rows2Delete = jTable1.getSelectedRowCount();

        int[] selectedRows = jTable1.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable1.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable1.getModel();

                defTableModel.removeRow(jTable1.getSelectedRow());
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed
    private void notification(String item_code, String name, String store, String qty) {
        try {
            connectDB.setAutoCommit(false);
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT * from alerts_setting where alert_type='receiving' and reference='" + item_code + "' and status=false");
            java.sql.ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                java.sql.PreparedStatement pstmts = connectDB.prepareStatement("SELECT first_name,phone_no,now() from secure_password where login_name='" + rs.getString("username") + "'");
                java.sql.ResultSet rst = pstmts.executeQuery();
                while (rst.next()) {
                    String message = "Hello " + rst.getString(1) + ",\n" + name + " has arrived at " + store + ".\nQty:" + qty + "\nArrival date:" + rst.getString(3) + ".\n\nCourtesy of Bespoke Inventory System";
                   
                    new SendSms(rst.getString(2), message);

                }
                java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("update alerts_setting set status=true WHERE alert_type='receiving' and reference='" + item_code + "' and username='" + rs.getString("username") + "'");
                pstmt31.executeUpdate();
            }

            connectDB.commit();
            connectDB.setAutoCommit(true);
        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

        }
    }
    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        double resFloat = 0.00;
        double cummulative_items = 0.00;
        double total = 0.00;

        double qty = 0.00;
        double unitValue = 0.00;
        double bulk_unit = 0.00;

        if (jTable1.getValueAt(jTable1.getSelectedRow(), 7) != null && jTable1.getValueAt(jTable1.getSelectedRow(), 8) != null) {
            qty = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 7).toString());// conversion;
            unitValue = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 8).toString());
            total = qty * unitValue;
            jTable1.setValueAt(total, jTable1.getSelectedRow(), 9);
        }
        if (jTable1.getValueAt(jTable1.getSelectedRow(), 6) != null && jTable1.getValueAt(jTable1.getSelectedRow(), 7) != null) {
            double bulk_qty = 0;
            try {

                java.sql.PreparedStatement pstmtSupplier = connectDB.prepareStatement("SELECT * from inventory_bulk_breaking where item_code='" + jTable1.getValueAt(jTable1.getSelectedRow(), 0) + "' and bulk_unit='" + jTable1.getValueAt(jTable1.getSelectedRow(), 6) + "'");
                java.sql.ResultSet rssupplier = pstmtSupplier.executeQuery();
                if (rssupplier.next()) {
                    bulk_qty = rssupplier.getDouble("qty");
                } else {
                    bulk_qty = 1;
                }
            } catch (Exception y) {

            }
            bulk_unit = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 7).toString());
            cummulative_items = bulk_qty * bulk_unit;
            if (cummulative_items > Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString())) {
                javax.swing.JOptionPane.showMessageDialog(this, "Cannot Receive more than ordered", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            } else {
                jTable1.setValueAt(cummulative_items, jTable1.getSelectedRow(), 12);
            }

        }
        for (int i = 0; i < jTable1.getRowCount(); i++) {

            if (jTable1.getModel().getValueAt(i, 9) != null) {//toString().compareToIgnoreCase(null) {

                resFloat = resFloat + Double.parseDouble(jTable1.getValueAt(i, 9).toString());
            }
        }
        jTextField2.setText(Double.toString(resFloat));


    }//GEN-LAST:event_jTable1KeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++) {
            for (int r = 0; r < jTable1.getColumnCount(); r++) {
                jTable1.getModel().setValueAt(null, k, r);
            }
        }

        txtSupplier.setText("");
        deliveredBytxt.setText("");
        dnoteNo.setText("");
        receivedby.setText("");

        jTextField2.setText("0.00");
        orderNotxt.setText("");
        // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    private void updateOrders(String item_code, String order_no, double balance) {
        try {
            connectDB.setAutoCommit(false);
            java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("update inventory_lpo set balance='" + balance + "' WHERE order_no = '" + order_no + "' AND item_code='" + item_code + "'");
            pstmt31.executeUpdate();

            connectDB.commit();
            connectDB.setAutoCommit(true);
        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {

            connectDB.setAutoCommit(false);
            connectDB.commit();
            connectDB.setAutoCommit(true);
            //top
            String transNo = null;
            Boolean SavePoint = false;
            Date today = null;
            try {
                //date
                java.sql.Statement pst22 = connectDB.createStatement();
                java.sql.ResultSet rs22 = pst22.executeQuery("select now()::date");
                while (rs22.next()) {
                    today = rs22.getDate(1);
                }

            } catch (Exception e) {

            }
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                if (jTable1.getModel().getValueAt(i, 0) != null) {

                    try {
                        java.sql.PreparedStatement pstmts = connectDB.prepareStatement("insert into inventory_receiving("
                                + "item_code,bulk_units,bulk_units_qty,unit_price,"
                                + "small_unit_price,qty_in,qty_out,supplier_code,"
                                + "d_note,invoice_no,transaction_no,batch_no,"
                                + "expiry_date,order_no,delivered_by,store_code,"
                                + "trans_type,credit,debit,delivery_date,receivedby)values("
                                + "?,?,?,?,"
                                + "?,?,?,?,"
                                + "?,?,?,?,"
                                + "?,?,?,?,"
                                + "?,?,?,?,?)");
                        pstmts.setObject(1, jTable1.getValueAt(i, 0).toString());
                        if (receivedby.getText().equals("") || deliveredBytxt.getText().equals("") || jTextField6.getText().equals("") || jTable1.getValueAt(i, 10) == null || dnoteNo.getText().equals("") || jTable1.getValueAt(i, 6) == null || jTable1.getValueAt(i, 7) == null || jTable1.getValueAt(i, 8) == null) {
                            SavePoint = false;
                            javax.swing.JOptionPane.showMessageDialog(this, "Some item entries Missing", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                        } else {
                            SavePoint = true;
                            pstmts.setObject(2, jTable1.getValueAt(i, 6).toString());
                            pstmts.setObject(3, Double.parseDouble(jTable1.getValueAt(i, 7).toString()));
                            pstmts.setObject(4, Double.parseDouble(jTable1.getValueAt(i, 8).toString()));
                            pstmts.setObject(9, dnoteNo.getText());
                            pstmts.setObject(12, jTable1.getValueAt(i, 10));
                            pstmts.setObject(15, deliveredBytxt.getText());
                            pstmts.setObject(21, receivedby.getText());
                            pstmts.setObject(16, Integer.parseInt(jTextField6.getText()));
                            pstmts.setObject(5, Double.parseDouble(jTable1.getValueAt(i, 9).toString()) / Double.parseDouble(jTable1.getValueAt(i, 12).toString()));
                            pstmts.setDouble(6, Double.parseDouble(jTable1.getValueAt(i, 12).toString()));
                        }

                        pstmts.setDouble(7, 0.0);
                        pstmts.setObject(8, txtSupplierCode.getText());
                        pstmts.setObject(10, "");
                        java.sql.Date expiryDate = null;
                        if (jTable1.getValueAt(i, 11) != null && SavePoint == true) {
                            java.sql.Statement pst22 = connectDB.createStatement();
                            java.sql.ResultSet rs22 = pst22.executeQuery("select '" + jTable1.getValueAt(i, 11).toString() + "'::date");
                            while (rs22.next()) {

                                expiryDate = rs22.getDate(1);
                                if (expiryDate.before(today) || expiryDate.equals(today)) {
                                    SavePoint = false;
                                    javax.swing.JOptionPane.showMessageDialog(this, "Please Enter correct Expiry date", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                } else {
                                    pstmts.setDate(13, expiryDate);
                                }
                            }
                        } else {
                            SavePoint = false;
                            javax.swing.JOptionPane.showMessageDialog(this, "You Must Enter Expiry date", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }

                        pstmts.setObject(14, orderNotxt.getText());
                        pstmts.setObject(17, "Receiving");
                        pstmts.setObject(18, 0.00);
                        if (SavePoint == false && (jTable1.getValueAt(i, 9) == null || Double.parseDouble(jTable1.getValueAt(i, 9).toString()) == 0)) {
                            javax.swing.JOptionPane.showMessageDialog(this, "item value cannot be zero", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                            SavePoint = false;
                        } else {
                            pstmts.setObject(19, Double.parseDouble(jTable1.getValueAt(i, 9).toString()));
                        }

                        pstmts.setDate(20, dbadmin.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                        if (SavePoint != false) {
                            //transno
                            java.sql.Statement pss = connectDB.createStatement();

                            java.sql.ResultSet rsts = pss.executeQuery("select lpad(nextval('transactions')::text,5,0::TEXT)");
                            while (rsts.next()) {

                                transNo = rsts.getObject(1).toString();
                            }

                            pstmts.setObject(11, transNo);
                            pstmts.executeUpdate();
                            updateOrders(jTable1.getValueAt(i, 0).toString(), orderNotxt.getText(), (Double.parseDouble(jTable1.getValueAt(i, 4).toString()) - Double.parseDouble(jTable1.getValueAt(i, 12).toString())));
                            notification(jTable1.getValueAt(i, 0).toString(), jTable1.getValueAt(i, 1).toString().concat(" " + jTable1.getValueAt(i, 2).toString()), jComboBox2.getSelectedItem().toString(), jTable1.getValueAt(i, 12).toString().concat(" " + jTable1.getValueAt(i, 5).toString()));
                            /**
                             * Here we start inserting Grn Table
                             */
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into inventory_inspection (lpono,delivery_note,item_code) values(?,?,?)");
                            pstmt.setObject(1, orderNotxt.getText());
                            pstmt.setObject(2, dnoteNo.getText());
                            pstmt.setObject(3, jTable1.getValueAt(i, 0));
                            pstmt.executeUpdate();
                            /**
                             * Here we finish inserting Grn Table
                             */
                        }

                    } catch (java.sql.SQLException sq) {
                        sq.printStackTrace();
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                    }
                }
            }
            if (SavePoint == false || jTable1.getValueAt(0, 0) == null) {
                javax.swing.JOptionPane.showMessageDialog(this, "Double Check Your Entries", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            } else if (SavePoint == true) {
                javax.swing.JOptionPane.showMessageDialog(this, "Transaction successfully done", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                jButton3.doClick();
            }
            //top
        } catch (Exception sq) {
            sq.printStackTrace();

            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                sql.printStackTrace();
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt) {

    }

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // Add your handling code here:
    }//GEN-LAST:event_jButton3MouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        if (jTable1.getSelectedColumn() == 13) {

        }

    }//GEN-LAST:event_jTable1MouseClicked

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jTable1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1KeyTyped

    /*
     * public void tableModelTableChanged1(javax.swing.event.TableModelEvent
     * evt) {
     *
     * double Gross = Double.parseDouble(this.jTextField2.getText()); double
     * Disc = Double.parseDouble(this.jTextField1.getText()); double Vat =
     * Double.parseDouble(this.jTextField4.getText()); double resFloat1 = 0.00;
     *
     * for (int i = 0; i < jTable1.getRowCount(); i++) {
     *
     * if (jTable1.getModel().getValueAt(i, 5) != null) {
     *
     * if (jTable1.getSelectedColumn() == 7) {
     *
     * resFloat1 = resFloat1 +
     * Double.parseDouble(jTable1.getModel().getValueAt(i, 8).toString());
     * jTextField4.setText(java.lang.String.valueOf(resFloat1));
     * jTextField51.setText(java.lang.String.valueOf(Gross-Disc-Vat));
     *
     * }else{ resFloat1 = resFloat1 +
     * Double.parseDouble(jTable1.getModel().getValueAt(i, 8).toString());
     * jTextField4.setText(java.lang.String.valueOf(resFloat1));
     * jTextField51.setText(java.lang.String.valueOf(Gross-Disc-Vat));
     *
     *
     * }
     * }
     * }
     * // jTextField31.setText(java.lang.String.valueOf(resFloat)); }
     */
    /*
     * public void tableModelTableChanged() { System.out.println("Calculating
     * totals for table 11 and 2."); // double resFloat = 0.00; double resFloat
     * = 0.00;
     *
     *
     * for (int i = 0; i < jTable1.getRowCount(); i++) {
     *
     * if (jTable1.getModel().getValueAt(i, 0) != null) {
     *
     * // if (jTable11.getSelectedColumn() == 1) {
     *
     * resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i,
     * 6).toString());
     *
     * // }
     *
     * jTextField2.setText(java.lang.String.valueOf(resFloat));
     *
     * }
     * }
     *
     * // jTextField31.setText(java.lang.String.valueOf(resFloat)); }
     *
     * public void tableModelTableChanged(javax.swing.event.TableModelEvent evt)
     * {
     *
     * // double resFloat = 0.00; double resFloat = 0.00;
     *
     * for (int i = 0; i < jTable1.getRowCount(); i++) {
     *
     * if (jTable1.getModel().getValueAt(i, 0) != null) {
     *
     * // if (jTable11.getSelectedColumn() == 1) {
     *
     * resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i,
     * 6).toString());
     *
     * // }
     *
     * jTextField2.setText(java.lang.String.valueOf(resFloat));
     *
     * }
     * }
     *
     * // jTextField31.setText(java.lang.String.valueOf(resFloat)); }
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private dbadmin.DatePicker datePicker1;
    private javax.swing.JTextField deliveredBytxt;
    private javax.swing.JTextField dnoteNo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    public javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField orderNotxt;
    private javax.swing.JTextField receivedby;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField txtSupplier;
    private javax.swing.JTextField txtSupplierCode;
    // End of variables declaration//GEN-END:variables
}
